<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>人间失格</title>
  
  <subtitle>人间失格の博客</subtitle>
  <link href="https://heekaai.github.io/atom.xml" rel="self"/>
  
  <link href="https://heekaai.github.io/"/>
  <updated>2022-01-18T15:59:47.235Z</updated>
  <id>https://heekaai.github.io/</id>
  
  <author>
    <name>HeeKaai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>STL入门---容器篇</title>
    <link href="https://heekaai.github.io/posts/2.html"/>
    <id>https://heekaai.github.io/posts/2.html</id>
    <published>2022-01-20T13:15:10.000Z</published>
    <updated>2022-01-18T15:59:47.235Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>此文介绍STL中的容器部分，仅仅涉及入门知识及一些常见的用法。</p><hr><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><p>  vector 翻译为向量，但是这里把它叫做“变长数组”更加容易理解它的用法。顾名思义：长度根据需要而自动改变的数组。</p><p>  如果要使用vector容器，需要在头文件里加上#include&lt; vector &gt;</p><h2 id="vector的定义"><a href="#vector的定义" class="headerlink" title="vector的定义"></a>vector的定义</h2><p>讲vector的定义之前，可以先回顾一下数组的定义方法。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typename arrayname[arraysize];  //一维数组typename arrayname[arraysize1][arraysize2];  //二维数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面再来看vector的定义：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;typename&gt; name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和一维数组一样，typename可以是所有的基本类型，例如：int、double、char、结构体······当然也可以是STL中的其他容器，例如：vector、set、queue······</p><p><strong>vector数组的定义</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;typename&gt; name[size];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; ve[100];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样ve[0]到ve[99]每一维都是一个vector容器。</p><p>当然，如果我们把typename也改成vector容器，同样可以实现二维数组的功能。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;vector&lt;int&gt;&gt; name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样数组的两个维度都是“变长”的。而vector&lt;typename&gt; name[size]其中一维的长度就已经固定了。稍微体会一下这两者的区别。</p><h2 id="访问vector容器中的元素"><a href="#访问vector容器中的元素" class="headerlink" title="访问vector容器中的元素"></a>访问vector容器中的元素</h2><p>vector容器有两种访问方式：通过下标或者迭代器访问。下面分别讲到这两种访问方式。</p><ol><li><p>通过下标访问</p><p>和访问普通的数组一样，对于一个定义为vector&lt;int&gt;ve的vector容器而言，直接访问ve[index]即可。当然这个下标访问和普通数组一样是从0~ve.size()-1，也存在越界的问题。</p></li><li><p>通过迭代器访问</p><p>迭代器（iterator）可以理解为一个类似于指针的东西，其定义为：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;typename&gt;::iterator it;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样定义之后 i t 就是vector&lt;typename&gt;::iterator 型的变量。也即迭代器 i t ，并且可以通过*i t来访问vector中的元素。</p><p>比如说：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main (){    vector&lt;int&gt; ve;    for(int i=0;i&lt;6;i++)    ve.push_back(i); //后面会提，在ve的末尾添加元素i    for(int i=0;i&lt;6;i++)    cout&lt;&lt;ve[i]&lt;&lt;" ";    cout&lt;&lt;endl;    vector&lt;int&gt;::iterator it=ve.begin(); //it指向ve的首地址    for(int i=0;i&lt;6;i++)    cout&lt;&lt;*(it+i)&lt;&lt;" ";    cout&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面给出的例程，可以看出*<em>ve[i]和</em>(it+i)是等价的**。</p><p>上面的代码中出现了ve.begin()，其作用是取到vector容器的首地址。相应的，ve.end()却不是取到vector容器的末尾地址，而是末尾元素的下一个地址。</p><p>另外，需要注意的还有迭代器还支持自加和自减操作，则遍历vector容器还有第三种写法：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main (){    vector&lt;int&gt; ve;    for(int i=0;i&lt;6;i++)    ve.push_back(i);     vector&lt;int&gt;::iterator it;    for(it=ve.begin();it!=ve.end();it++)    cout&lt;&lt;*it&lt;&lt;" ";    cout&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="vector容器的常用函数"><a href="#vector容器的常用函数" class="headerlink" title="vector容器的常用函数"></a>vector容器的常用函数</h2><ol><li><p><strong>push_back()</strong></p><p>上面的代码就已经使用过这种方式添加过元素了。很简单，和函数名一样，push_back(x) 的作用就是在 vector 容器最后添加上元素 x ，时间复杂度是 O(1) 。</p></li><li><p><strong>pop_back()</strong></p><p>有添加作用的函数自然，相对的肯定会有删减作用的函数。pop_back() 用以删除vector容器中的最后一个元素，时间复杂度同样为 O(1) 。</p><p>比如说：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main (){    vector&lt;int&gt; ve;    for(int i=1;i&lt;=5;i++)    {        ve.push_back(i);    }    vector&lt;int&gt;::iterator it;    for(it=ve.begin();it!=ve.end();it++)    {        cout&lt;&lt;*it;        cout&lt;&lt;" ";    }    putchar('\n');    ve.pop_back();    for(it=ve.begin();it!=ve.end();it++)    {        cout&lt;&lt;*it;        cout&lt;&lt;" ";    }    putchar('\n');    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p><strong>size()</strong> </p><p>size()函数用以获取vector容器中的元素个数。</p></li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main (){    vector&lt;int&gt; ve;    for(int i=1;i&lt;=5;i++)    {        ve.push_back(i);    }    cout&lt;&lt;ve.size()&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p><strong>clear()</strong></p><p>clear() 用以清空vector容器中的所有元素，时间复杂度是 O(N) 其中N是vector容器中的元素个数。</p><p>示例如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main (){    vector&lt;int&gt; ve;    for(int i=1;i&lt;=5;i++)    {        ve.push_back(i);    }    cout&lt;&lt;ve.size()&lt;&lt;endl; //输出5    ve.clear();    cout&lt;&lt;ve.size()&lt;&lt;endl; //输出0    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="5"><li><p><strong>insert()</strong></p><p>insert(it,x) 用以向vector容器的任意迭代器it位置插入一个元素x，时间复杂度为 O(N)</p><p>示例如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main (){    vector&lt;int&gt; ve;    for(int i=1;i&lt;=5;i++)    {        ve.push_back(i);    }    vector&lt;int&gt;::iterator it;    for(it=ve.begin();it!=ve.end();it++)    {        cout&lt;&lt;*it&lt;&lt;" "; //输出1 2 3 4 5    }    cout&lt;&lt;endl&lt;&lt;ve.size()&lt;&lt;endl;    it=ve.begin()+2; //***    ve.insert(it,-1);    for(it=ve.begin();it!=ve.end();it++)    {        cout&lt;&lt;*it&lt;&lt;" "; //输出1 2 -1 3 4 5    }    cout&lt;&lt;endl&lt;&lt;ve.size()&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>需要特别说明的是，代码中注释标注为三个*的地方，在常用的STL容器中，<strong>只有在string和vector中，才允许使用ve.begin()+2这种迭代器直接加上整数的写法！</strong></p><ol start="5"><li><p><strong>erase()</strong></p><p>erase()也是一种删除函数，它有两种使用方法：删除单个元素以及删除一个区间内的所有元素。时间复杂度自然也是 O(N) 。</p><p>（1）删除单个元素：</p><p>erase(it)即删去迭代器it处的元素。</p><p>例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main (){    vector&lt;int&gt; ve;    for(int i=1;i&lt;=5;i++)    {        ve.push_back(i);    }    vector&lt;int&gt;::iterator it;    for(it=ve.begin();it!=ve.end();it++)    {        cout&lt;&lt;*it&lt;&lt;" "; //输出1 2 3 4 5     }    cout&lt;&lt;endl&lt;&lt;ve.size()&lt;&lt;endl;    it=ve.begin()+2;    ve.erase(it);    for(it=ve.begin();it!=ve.end();it++)    {        cout&lt;&lt;*it&lt;&lt;" "; //输出1 2 4 5    }    cout&lt;&lt;endl&lt;&lt;ve.size()&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）删除一个区间内的所有元素</p><p>遵循着“左闭右开”的原则，erase(left,right)即删去[first,right)内vector容器中的所有元素。</p><p>示例如下：</p></li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main (){    vector&lt;int&gt; ve;    for(int i=1;i&lt;=5;i++)    {        ve.push_back(i);    }    vector&lt;int&gt;::iterator it;    for(it=ve.begin();it!=ve.end();it++)    {        cout&lt;&lt;*it&lt;&lt;" "; //输出1 2 3 4 5     }    cout&lt;&lt;endl&lt;&lt;ve.size()&lt;&lt;endl;    ve.erase(ve.begin()+1,ve.begin()+4); //删去下标为[1,4)的元素    for(it=ve.begin();it!=ve.end();it++)    {        cout&lt;&lt;*it&lt;&lt;" "; //输出1 5    }    cout&lt;&lt;endl&lt;&lt;ve.size()&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  所以清空vector容器除了上面提到的clear()函数外，现在也可以使用第二种方法：ve.erase(ve.begin(),ve.end())。这样只是加深对“左闭右开”的理解，因为ve.end()指向的是末尾元素的下一个位置。当然clear()函数明显更加方便、简洁。</p><hr><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><p>在C语言中，通常使用字符数组char s[] 来对字符串进行存储，在此基础上为了对字符串的操作更加的快捷、方便，C++在STL中加入了string类型，对字符串的常用功能进行了封装。如果要使用string，需要添加头文件&lt;string&gt;<strong>（注意string.h和string是完全不一样的头文件）</strong>。下面来看看string容器的常用使用方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="C++" scheme="https://heekaai.github.io/categories/C/"/>
    
    <category term="基础" scheme="https://heekaai.github.io/categories/C/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="STL" scheme="https://heekaai.github.io/categories/C/%E5%9F%BA%E7%A1%80/STL/"/>
    
    
    <category term="C++" scheme="https://heekaai.github.io/tags/C/"/>
    
    <category term="STL" scheme="https://heekaai.github.io/tags/STL/"/>
    
    <category term="大一" scheme="https://heekaai.github.io/tags/%E5%A4%A7%E4%B8%80/"/>
    
    <category term="假期" scheme="https://heekaai.github.io/tags/%E5%81%87%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>C语言期末复习笔记</title>
    <link href="https://heekaai.github.io/posts/1.html"/>
    <id>https://heekaai.github.io/posts/1.html</id>
    <published>2022-01-06T15:24:12.000Z</published>
    <updated>2022-01-10T06:24:58.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        临近期末考试（C语言程序设计），本人也是从暑假（7月份）开始接触的C语言，可以说是一只纯正的小白，为了更好、更有效率的备考，这篇博客也就由此诞生了。</p><p>​        顺序没啥讲究，完全是想到了什么就写出来了。很多算法优化空间还有很大。</p><h1 id="动态规划初步"><a href="#动态规划初步" class="headerlink" title="动态规划初步"></a>动态规划初步</h1><p>​    动态规划其实我感觉也可以叫作记忆化的递归优化，顾名思义，就是一种把递归可能会产生的重复运算记录下来，以空间换时间（当然空间复杂度的代价也是可以降到最小的，比如说滚动数组来实现）。</p><h2 id="DP的组成部分"><a href="#DP的组成部分" class="headerlink" title="DP的组成部分"></a>DP的组成部分</h2><p>​    几乎每一道可以用动态规划来解决的题目，设计算法的时候都可以被拆解为以下的几步：</p><ol><li><strong>确定状态（定海神针的作用）</strong><ul><li>最后一步</li><li>子问题  （由最后一步将问题分解，即解决子问题+最后一步）</li></ul></li><li><strong>确定状态转移方程</strong><ul><li>子问题定下来，状态转移就是子问题的一般化过程</li></ul></li><li><strong>初始化与边界</strong></li><li><strong>计算顺序</strong></li></ol><p>这四步听起来好像不太好理解，但是动态规划的核心就在这。通过题目应该可以更好的思考和理解动态规划的组成部分。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="坐标型DP"><a href="#坐标型DP" class="headerlink" title="坐标型DP"></a>坐标型DP</h3><p>题目描述：</p><blockquote><p>如图，A 点有一个过河卒，需要走到目标 B 点。卒行走规则：可以向下、或者向右。同时在棋盘上的任一点有一个对方的马（如上图的C点），该马所在的点和所有跳跃一步可达的点称为对方马的控制点。例如上图 C 点上的马可以控制 9 个点（图中的P1，P2 … P8 和 C）。卒不能通过对方马的控制点。<img src="https://uploadfiles.nowcoder.com/images/20180619/305282_1529381964806_2F9E346473965B15535395B11161C11E" alt="img"></p><p>棋盘用坐标表示，A 点（0,0）、B 点（n,m）(n,m 为不超过 20 的整数，并由键盘输入)，同样马的位置坐标是需要给出的（约定: C&lt;&gt;A，同时C&lt;&gt;B）。现在要求你计算出卒从 A 点能够到达 B 点的路径的条数。</p><p>输入描述：</p><blockquote><p>输入B点的坐标（n,m）以及对方马的坐标（X,Y） (不用判错)</p></blockquote><p>输出描述：</p><blockquote><p>输出一个整数表示路径的条数。</p></blockquote><p>样例输入：</p><blockquote><p>6 6 3 2</p></blockquote><p>样例输出：</p><blockquote><p>17</p></blockquote></blockquote><p>原题链接：<a href="https://ac.nowcoder.com/acm/contest/24213/1008">Nowcoder-过河卒</a></p><p>题目分析：</p><blockquote><p>参照上面的DP组成部分，一步一步来：</p><ul><li>最后一步：最后一定会到达（n，m）的位置</li><li>子问题：在没有马控制的前提下，一定是由（n-1，m）或者（n，m-1）过来</li><li>状态转移方程：dp[i] [j]=dp[i-1] [j]+dp[i] [j-1]</li><li>初始化与边界：首先马的领地是不能到的，直接记为0；然后就是第一行和第一列都是1；在初始化第一行第一列的时候，遇到马就直接break，因为后面的都到不了了；</li></ul></blockquote><p>AC代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdbool.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">long</span> <span class="token keyword">long</span> dp<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool judge<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//判断是否为马的领地，布尔数组合适</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>judge<span class="token punctuation">,</span>true<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>judge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    judge<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    judge<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>judge<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>judge<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>judge<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    judge<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>judge<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>judge<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>judge<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>judge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>judge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>judge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="序列DP"><a href="#序列DP" class="headerlink" title="序列DP"></a>序列DP</h3><p>原题链接：<a href="http://202.197.224.59/exam/index.php/problem/exam_read/id/1378/exam_id/355">XTUOJBlocks</a></p><p>题目描述：</p><blockquote><p>给你一个n块积木，每个积木块都是立方体，现在把它们排列一排，成m列，要求每列上至少有1个积木，且从左到右，每列的积木数量呈严格单调下降。</p></blockquote><p>​        题意即求n等于m个不同的数相加的方案数</p><ul><li><p>最后一步：m个数不同，则一定有最大的数，记为k。</p></li><li><p>子问题：则求解n-k等于m-1个不同的数相加的方案数。</p></li><li><p>状态转移方程：<br>$$<br>dp(i,j,k)=\sum_{t&lt;k}dp(i-k,j-1,t)<br>$$</p></li><li><p>初始化与边界：m=1时方案数为1</p></li></ul><p>代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">101</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">==</span>i<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> T<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token operator">+=</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变式：<a href="http://202.197.224.59/exam/index.php/problem/exam_read/id/1398/exam_id/356">XTUOJ积木Ⅱ</a></p><p>题目描述：</p><blockquote><p>n个积木，分成m垛，这些积木垛排成一行，使得所有垛的积木块数不相同，且呈“山“字形（积木数先单调上升，再单调下降）。现在已知n,m,请求方案数。</p></blockquote><p>​        有上面这题的基础，这题也就不难了</p><p>​        大体思路：有了n个数等于m个不同的数相加的方案数，对于这个单调的序列，除了最大的数以外，每个数都有两个选择 留在左边 或者放到右边 两个选择。但是不能全留也不能全走。<br>$$<br>f(i,j)=(2^{j-1}-2)*\sum_{k=1}^idp(i,j,k)<br>$$</p><p>AC代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">mi</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    res<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">101</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">==</span>i<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> T<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token operator">+=</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token operator">*=</span><span class="token punctuation">(</span><span class="token function">mi</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        当然动态规划内容远比这多，只是在这里给大家提供一种思想，遇到动态规划，往这四个组成部分上面去靠去思考准没错。</p><p>​        动态规划敬请期待后续文章。</p><h1 id="排序篇"><a href="#排序篇" class="headerlink" title="排序篇"></a>排序篇</h1><h2 id="选择、插入排序"><a href="#选择、插入排序" class="headerlink" title="选择、插入排序"></a>选择、插入排序</h2><p>​        冒泡、选择、插入排序是比较基础、简单的一类排序方法，相对的，它们的执行效率也会相对比较低。在不做优化的情况下，时间复杂度会达到 O（n^2） 的级别，这在很多情况下都是难以接受的。</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>​        选择排序（Selection-sort）是一种简单直观的排序算法。</p><p>​        首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。每一次从无序组的数据元素中选出最小的一个元素，存放在无序组的起始位置，无需组的元素减少，有序组的元素增加，直到全部待排序的数据元素排完。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token comment">//选择排序</span><span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//假设第一个元素是最小的</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>arry<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arry<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                                min <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">//保存最小元素的下标</span>                        <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">//交换</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arry<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>                arry<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//输出</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">selectSort</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>​        插入排序是最简单常用的方法，将数组分为两部分，排好序的数列，以及未排序的数列，将未排序的数列中的元素 与排好序的数列进行比较，然后将该元素插入到已排序列的合适位置中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token comment">//插入排序</span><span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token comment">//保存要插入的元素</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span><span class="token comment">//从当前要要比较插入的元素的前面一个开始</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//第一个元素视为有序,把后面的元素一个一个的插入到前面</span>        <span class="token punctuation">{</span>                temp <span class="token operator">=</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token operator">&amp;&amp;</span>arry<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>temp<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                        arry<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arry<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前面的元素往后面移动</span>                        j<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                arry<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment">//把要插入的元素,插入进对应的位置</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//输出</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">insertSort</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>​        quicksort快速排序，qsort()是c语言的库函数，在头文件&lt;stdlib.h&gt;中，基于二分的思想，所以执行效率非常的优秀，务必掌握。</p><p>​        qsort()函数的四个参数：</p><ul><li><p>数组名（待排元素的首地址）</p></li><li><p>待排元素的个数</p></li><li><p>数据类型所占字节大小</p></li><li><p>cmp函数  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token comment">//格式是固定不变的</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="int-型"><a href="#int-型" class="headerlink" title="int 型"></a>int 型</h3><p>模板：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pa<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span> <span class="token comment">//强制类型转换</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pb<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span>pa<span class="token operator">-</span><span class="token operator">*</span>pb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传参形式</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        若想要实现降序，只需将cmp函数的返回值改为相反数即可。</p><p>​        相应的，char型字符数组，要实现排序，只需要改动cmp函数里的强制类型转换部分。</p><h3 id="二维int型"><a href="#二维int型" class="headerlink" title="二维int型"></a>二维int型</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">N <span class="token number">4</span></span></span> <span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pa<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pb<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token operator">&amp;&amp;</span><span class="token operator">*</span>pa<span class="token operator">==</span><span class="token operator">*</span>pb<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>pa<span class="token operator">++</span><span class="token punctuation">,</span>pb<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>N<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">*</span>pa<span class="token operator">-</span><span class="token operator">*</span>pb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">prt</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">prt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">prt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>​        利用&lt;string.h&gt;头文件里现成的比较函数strcmp（）函数即可。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">less</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pa<span class="token punctuation">,</span><span class="token operator">*</span>pb<span class="token punctuation">;</span>    pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>    pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>pa<span class="token punctuation">,</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">prt</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Hello"</span><span class="token punctuation">,</span><span class="token string">"Hell"</span><span class="token punctuation">,</span><span class="token string">"Her"</span><span class="token punctuation">,</span><span class="token string">"He"</span><span class="token punctuation">,</span><span class="token string">"His"</span><span class="token punctuation">,</span><span class="token string">"Hers"</span><span class="token punctuation">,</span><span class="token string">"Helm"</span><span class="token punctuation">,</span><span class="token string">"Heat"</span><span class="token punctuation">,</span><span class="token string">"Heal"</span><span class="token punctuation">,</span><span class="token string">"Heap"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">prt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>less<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">prt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数学问题"><a href="#数学问题" class="headerlink" title="数学问题"></a>数学问题</h1><h2 id="最大公约数与最小公倍数"><a href="#最大公约数与最小公倍数" class="headerlink" title="最大公约数与最小公倍数"></a>最大公约数与最小公倍数</h2><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><p>​        一般用 gcd（a,b） 来表示 a 和 b 的最大公约数，而求解最大公约数的方法通常是欧几里得算法（即辗转相除法）</p><p>​        欧几里得算法基于如下定理：<br>$$<br>gcd(a,b)=gcd(b,amodb)<br>$$</p><p>​    证明过程暂且省略，并且容易得知gcd（a , 0）= 0 。所以很明显是一个是一个递归，递归式和边界都已得到，则可以写出代码的模板：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    当然，引进中间变量的写法也是可以的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t<span class="token operator">=</span>a<span class="token operator">%</span>b<span class="token punctuation">;</span>        a<span class="token operator">=</span>b<span class="token punctuation">;</span>        b<span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        选择任意一种方便自己记忆的写法即可。</p><h3 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h3><p>​    最小公倍数在最大公约数的基础上进行，一般用 lcm（a , b）表示 a 和 b 的最小公倍数。</p><p>​    若将 a 和 b 的最大公约数记作 c 的话，最小公倍数自然就是 a*b / d ，但是这样写a * b在计算的过程中容易溢出，更好的写法是 （a/d）*b 。</p><h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h2><p>​        素数的定义都熟，也就不再赘述了。特别注意，<strong>1既不是素数也不是合数</strong>。</p><p>​        应对期末考试里面有关素数的题目，打素数表显然是一种最好的方法，目前还没有出现过问题，属于是百试不爽了。</p><p>​        打素数表，首推的是筛法求解，这样进一步把时间复杂度降低了。一般就选埃氏筛和欧拉筛（时间复杂度都可以达到线性）。但是我用欧拉筛比较多一点，所以这里就放欧拉筛的代码模板了。</p><p>​        还要表明的一点就是，因为是线性打表，所以有空间上的限制，一般到1e7都是不会出问题的，更大的话编译就会报错了。</p><p>​    模板如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">N <span class="token number">1000007</span></span></span>bool num<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//在&lt;stdbool.h&gt;里</span><span class="token keyword">int</span>  prime<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>true<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在&lt;string.h&gt;里</span>    num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>true<span class="token punctuation">)</span>prime<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cnt<span class="token operator">&amp;&amp;</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num<span class="token punctuation">[</span>i<span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        对于上面模板，prime里面所有数都是有序素数，num下标用以判断是否为素数。还要一点需要注意，N开的时候至少要比n大1。</p><h2 id="质因子分解"><a href="#质因子分解" class="headerlink" title="质因子分解"></a>质因子分解</h2><blockquote><p><strong>唯一分解定理：</strong></p><p>​        <em>每个大于1的自然数</em>，要么本身就是质数，要么可以写为2个或以上的质数的积，而且这些质因子从小到大排序，写法仅有一种方式。</p></blockquote><p>​        个人感觉这个知识点也是期末考试里比较常见的考点。</p><p>​        由上面唯一分解定理不难看出，在做质因子分解有关题目时，还得借助上面提到的素数部分内容，必须提前打好素数表。</p><p>​        Tips：</p><blockquote><p>​        对于一个正整数 n 来说，如果它存在 1 和本身以外的因子，那么是一定在sqrt（n）的左侧和右侧成对出现（这就是判断 n 是否为素数时只要从1 - sqrt（n）的原因）。</p><p>​        把这个结论用在质因子分解上面：对于正整数 n（n≥2）言,至多只存在一个大于sqrt（n）的质因子，其余的质因子全部小于等于sqrt（n）。</p></blockquote><p>​        所以质因子分解的核心思路就出来了：</p><ul><li><p>​    枚举 1 ~ sqrt（n）的所有质数</p></li><li><p>​    记质因子为p，考虑到有多个相同的质因子，所以重复直至无法整除。</p></li><li><p>​    如果上述步骤结束后， n 仍然大于 1 ，说明 n 有且只有一个大于sqrt（n）的质因子，如果  n 是素数，则就是 n 本身。</p></li></ul><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><p><a href="http://202.197.224.59/exam/index.php/problem/exam_read/id/1396/exam_id/356#_2">XTUOJ1396</a></p><p>题目描述：</p><blockquote><p>根据质因子唯一分解定理可知<br>$$<br>n=\prod_{i=1}^mpi^{ki}<br>$$<br>其中 pi 为素数。</p><p>$$<br>定义g(n)=\sum_{i=1}^{m}ki,求\sum_{i=a}^bg(i)<br>$$</p></blockquote><p>输入与输出：</p><blockquote><p>输入：第一行是一个整数T（1≤T≤10000），表示样例的个数。 以后每行两个整数a,b（1≤a≤b≤10^6）。</p><p>输出：每行输出一个样例的结果。</p></blockquote><p>样例输入与输出</p><blockquote><p>输入：</p><p>2</p><p>1 2</p><p>1 1000000</p><p>输出：</p><p>1</p><p>3626619</p></blockquote><p>​        感觉这题就是考察上面提到的东西，区间的那一段，就用前缀和解决即可。直接看代码吧，注释部分解释的很详细。</p><p>AC代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdbool.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">N <span class="token number">1000007</span> </span></span>bool num<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> prime<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fact<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 打素数表，其实开到sqrt(n)即可，但是过了就懒得优化了</span>    <span class="token function">memset</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>true<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>true<span class="token punctuation">)</span>        prime<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cnt<span class="token operator">&amp;&amp;</span>i<span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num<span class="token punctuation">[</span>i<span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 找质因子个数</span>    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//count作用是记录每个质因子个数，进入循环前记得清0</span>        <span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cnt<span class="token operator">&amp;&amp;</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">%</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">%</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    k<span class="token operator">/=</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//还剩下一个质因子</span>        fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>count<span class="token punctuation">;</span> <span class="token comment">//用fact存放每个整数i的质因子个数，即g(i);</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//题目要求区间的和，显然前缀和比较合适</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//前缀和 a-1 不要弄错</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://202.197.224.59/exam/index.php/problem/exam_read/id/1377/exam_id/355">XTUOJ1377</a> 同一个考点，解法非常相似。</p><h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><p>​    打表是我最喜欢的方法，快并且简单！</p><p>​    数学原理就是杨辉三角呗</p><p>模板代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token keyword">long</span> num<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//一定记得开long long不然会爆</span><span class="token keyword">void</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">65</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">65</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>num<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>​        数学问题当然还有很多，比如说分数的四则运算（可以转化成假分数的形式，加上最大公约数的化简基本上就能过），还有大整数的四则运算（感觉期末考试这个好像没考过，但是我也有一点点心得，以后可以总结一下，在这里就先不写出来了）</p><h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><h2 id="简单贪心"><a href="#简单贪心" class="headerlink" title="简单贪心"></a>简单贪心</h2><blockquote><p>​        贪心算法是求解一类最优化问题的方法，总是做出在当前看来是最好的选择（局部最优）。也就是说，不从整体最优上加以考虑，只做出在某种意义上的局部最优解。（“活在当下，及时享乐”）贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</p></blockquote><p>​        解题的一般步骤是：<br>​        1.建立数学模型来描述问题；<br>​        2.把求解的问题分成若干个子问题；<br>​        3.对每一子问题求解，得到子问题的局部最优解；<br>​        4.把子问题的局部最优解合成原来问题的一个解。</p><p>​        看到子问题是不是又想到了动态规划。贪心和动态规划都要求原问题必须拥有<strong>最优子结构</strong>。二者的区别在于，贪心法采用的计算方式类似于“自顶向下”，但是并不等待子问题求解完后<br>再选择使用哪一个，而是通过一种策略直接选择一个子问题去求解，没被选择的子问题就不<br>去求解了，<strong>直接抛弃</strong>。也就是说，它总是只在上一步选择的基础上继续选择，因此整个过程<br>以一种单链的流水方式进行，<em>显然这种所谓 “最优选择” 的正确性需要用归纳法证明</em>。（而证明过程往往会比贪心本身复杂）而动态规划不管是采用自底向上还是自顶向下的计算方式，都是从边界开始向上得到目标问题的解。也就是说，它总是会考虑所有子问题，并选择继承能得到最优结果的那个，对暂时没被继承的子问题，后期可能会再次考虑它们，因此还有机会成为全局最优的一部分，不需要放弃。所以贪心是一种壮士断腕的决策，只要进行了选择，就不后悔；动态规划则要看哪个选择笑到了最后，暂时的领先说明不了什么。</p><p>​        贪心算法设计时往往无需加以证明，自己认为无法举出反例就可以放心大胆的去设计。</p><p>​        例题：</p><p>原题链接：<a href="https://ac.nowcoder.com/acm/contest/20960/1036">Nowcoder字典序最大的子序列</a></p><p>题目描述：</p><blockquote><p>给定字符串s（只包含小写字母），请求出最大子序列。</p></blockquote><p>输入与输出：</p><blockquote><p>输入一行一个字符串 s ，且1 &lt;= |s| &lt;= 100,000</p><p>输出字典序最大的子序列</p></blockquote><p>样例：</p><blockquote><p>样例1：</p><p>输入：</p><p>ababba</p><p>输出：</p><p>bbba</p><p>样例2：</p><p>输入：</p><p>abbcbccacbbcbaaba</p><p>输出：</p><p>cccccbba</p></blockquote><p>​        这题很简单，大家可以感受一下贪心。字典序最大是不是第一个字母的字典序越大就越好，所以就把当前序列中最大的字典序找出来即可。及时缩短字符串长度。</p><p>AC代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100007</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> max<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cnt<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>max<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">==</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>max<span class="token operator">&gt;=</span><span class="token string">'a'</span><span class="token punctuation">;</span>max<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="区间贪心"><a href="#区间贪心" class="headerlink" title="区间贪心"></a>区间贪心</h2><p>​        贪心算法思路都是相同的，区间贪心自然不例外，保证当下最优即可。</p><p>​        区间贪心即对于区间有交集的问题，如何求解最多有几个区间能够互不相交，或者如何用尽量少的区间表示这些区间。</p><p>​        也是拿一道例题说明：</p><p>原题链接：<a href="https://ac.nowcoder.com/acm/contest/20960/1018">Nowcoder值周</a></p><p>题目描述：</p><blockquote><p>JC内长度为L的马路上有一些值周同学，每两个相邻的同学之间的间隔都是1米。我们可以把马路看成一个数轴，马路的一端在数轴0的位置，另一端在L的位置；数轴上的每个整数点，即0,1,2,…L，都有一个值周同学。 由于水宝宝有用一些区间来和ssy搞事情，所以为了避免这种事走漏风声，水宝宝要踹走一些区域的人。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的人（包括区域端点处的两个人）赶走。你的任务是计算将这些人都赶走后，马路上还有多少个人。</p></blockquote><p>输入与输出：</p><blockquote><p>输入：</p><p>第一行有2个整数L和M，L代表马路的长度，M代表区域的数目，L和M之间用一个空格隔开。 接下来的M行每行包含2个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标</p><p>输出：</p><p>1个整数，表示马路上剩余的人的数目。</p></blockquote><p>样例：</p><blockquote><p>样例1：</p><p>输入：</p><p>500 3</p><p>150 300</p><p>100 200</p><p>470 471</p><p>输出：</p><p>298</p><p>样例数据说明:</p><blockquote><p>对于所有的数据，1≤L≤100000000</p><p>对于10%的数据，1&lt;=M&lt;=100</p><p>对于20%的数据，1&lt;=M&lt;=1000</p><p>对于50%的数据，1&lt;=M&lt;=100000</p><p>对于100%的数据，1&lt;=M&lt;=1000000</p></blockquote></blockquote><p>​        </p><p>放上AC代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">N <span class="token number">2</span></span></span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">1000007</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pa<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pb<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token operator">&amp;&amp;</span><span class="token operator">*</span>pa<span class="token operator">==</span><span class="token operator">*</span>pb<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>pa<span class="token operator">++</span><span class="token punctuation">,</span>pb<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>N<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">*</span>pa<span class="token operator">-</span><span class="token operator">*</span>pb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> L<span class="token punctuation">,</span>M<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span>L<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token operator">=</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token operator">=</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>  <span class="token comment">//已经是有序的序列所以只会有三种情况</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>r<span class="token punctuation">)</span>r<span class="token operator">=</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 两端被包括在内的情况被这个if排除</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            ans<span class="token operator">-=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//两端也被去掉了+1不能漏</span>            l<span class="token operator">=</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            r<span class="token operator">=</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ans<span class="token operator">-=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最后一组的区间没有减</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这题要用到之前提到的快速排序。区间贪心部分的解释已经在代码注释中给出。</p><h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>​        二分查找是基于有序序列的查找算法，递增和递减原理上并无区别，代码上稍微改动即可，所以下面都一严格递增序列为例。</p><p>​        算法原理：</p><blockquote><p>[ left , right ]一开始定为整个序列的左端和右端区间，每次判断中间位置与x的大小关系，则会有以下几种情况出现：</p><p>其中 mid = （left + right） / 2 ，序列记为num[ ] </p><ul><li>若 num[mid]==x 跳出</li><li>若 num[mid]&gt;x，则x在mid左边，right 更新为 mid-1</li><li>若 num[mid]&lt;x，则x在mid右边，left 更新为 mid+1</li></ul></blockquote><p>​        原理很好理解，代码也不难实现，所以这里就不放模板代码了，因为每次题目都不会考察的这么直白，不会直接考查找某某某元素，而是会绕着考，所以核心是要理解二分的思想，运用二分的思想从而达到降低时间复杂度的目的，因为二分每一步都能去除一般的区间，所以时间复杂度是 O (logn) 级别的，非常的高效！</p><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><p>先放上原题链接：<a href="https://ac.nowcoder.com/acm/contest/22353/F">Nowcoder-华华给月月准备礼物</a></p><p>题目描述：</p><blockquote><p>二月中旬虐狗节前夕，华华决定给月月准备一份礼物。为了搭建礼物的底座，华华需要若干根同样长的木棍。华华手头上有一些长度参差不齐的木棍，他想将每根都裁剪成若干段自己想要的长度，并丢掉多余的部分。因为华华的手很巧，所以他的裁剪过程不会有任何的失误。也就是说，对于一根长度为N的木棍，华华可以精准的将它们裁剪为若干段木棍，使它们的长度之和为N。<br>华华不知道裁剪成多长比较好，所以干脆越长越好。不过由于华华有点强迫症，所以他希望长度为非负整数。保证所有木棍的原长也是非负整数。那么请问华华最终得到的每根木棍多长呢？</p></blockquote><p>输入：</p><blockquote><p>第一行两个正整数N、K，表示木棍原本的根数和华华希望得到的木棍根数。<br>第二行N个正整数 Li 表示每根木棍的初始长度。</p><p>数据备注：</p><blockquote><p>1 ≤ N ≤ 2*1e5 ， 1 ≤ Li ≤ 1e9 ， 1 ≤ K ≤ 1e9</p></blockquote></blockquote><blockquote><p>输出一行一个非负整数，表示华华最终得到的n根木棍的每根最大长度。</p></blockquote><p>样例</p><blockquote><p>示例1：</p><blockquote><p>输入：</p><p>5 10</p><p>4 4 4 5 3</p></blockquote><blockquote><p>输出：</p><p>1</p></blockquote><p>示例2：</p><blockquote><p>输入：</p><p>5 3</p><p>1 2 3 4 5</p></blockquote><blockquote><p>输出：</p><p>3</p></blockquote></blockquote><p>​        题目分析：</p><p>​        是不是咋一看很难和二分法联系上去，但是你仔细思考，还是很容易发现其和二分的联系的。很显然，（记每根木棍的长度为L，这样裁剪能够得到的木棍根数为K）随着 L 增大，那么可以得到的根数 K 会变小。从这个角度出发就可以想到本题可以通过二分L，判断 K 和目标值的大小关系，及时调整区间的左右端点值。</p><p>​        附上代码可能会更好理解。</p><p>​        AC代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> N<span class="token punctuation">,</span>K<span class="token punctuation">,</span>L<span class="token punctuation">[</span><span class="token number">200007</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//全局变量可以不需要重复传参</span><span class="token keyword">int</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>  <span class="token comment">//计算根数的函数</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        ans<span class="token operator">+=</span>L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>x<span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>r<span class="token punctuation">)</span>r<span class="token operator">=</span>L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    r<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//这个细节要注意，最大的L是可以重复的，嫌麻烦可以直接把r开到1e9</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span> <span class="token comment">//这是个小小的转换</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">C</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>K<span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        解题的大体思路代码中用注释解释清楚了，只是最后的while循环那里有个小小的转换，题意满足要求最大的长度，不如转化成第一个不满足条件的长度，在用这个长度-1即可得到答案，这样的转换可以让代码变得更加简洁。</p><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>​    快速幂其实就是二分的一个应用，就是一个小技巧吧，见过的就自然会用。基于二分的思想，因此也常称为二分幂。</p><p>题目链接：<a href="https://www.luogu.com.cn/problem/P1226">快速幂||取余运算 </a></p><p>大体思路：</p><blockquote><ul><li><p>如果b是奇数<br>$$<br>a^b=a*a^{b-1}<br>$$</p></li><li><p>如果b是偶数<br>$$<br>a^b=a^{b/2}*a^{b/2}<br>$$</p></li></ul></blockquote><p>​    经过一定次数的转换，b可以变到0。很明显是一种递归的思想，时间复杂度则是O（logb）</p><p>代码模板：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">fastPower</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> base<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> power<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>power <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>power <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> result <span class="token operator">*</span> base <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        power <span class="token operator">=</span> power <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        base <span class="token operator">=</span> <span class="token punctuation">(</span>base <span class="token operator">*</span> base<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    当然快速幂也有一种迭代的写法，但是迭代和递归的写法在效率上区别不大，所以不在这里过多阐述。</p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>​        都是一些比较简单的知识和入门级别算法，大佬不喜勿喷。</p><p>​        感谢你能够看到这篇文章的最后！！这也算是个人的第一篇博客了，希望能够有所收获。文章里发现任何问题，一定记得联系我指出噢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="C语言" scheme="https://heekaai.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="算法笔记" scheme="https://heekaai.github.io/categories/C%E8%AF%AD%E8%A8%80/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    <category term="基础" scheme="https://heekaai.github.io/categories/C%E8%AF%AD%E8%A8%80/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="大一" scheme="https://heekaai.github.io/tags/%E5%A4%A7%E4%B8%80/"/>
    
    <category term="C" scheme="https://heekaai.github.io/tags/C/"/>
    
    <category term="学习" scheme="https://heekaai.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="基础算法" scheme="https://heekaai.github.io/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>博客的诞生</title>
    <link href="https://heekaai.github.io/posts/3c47c717.html"/>
    <id>https://heekaai.github.io/posts/3c47c717.html</id>
    <published>2022-01-03T14:35:02.000Z</published>
    <updated>2022-01-13T13:20:55.684Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>相遇就是缘！</strong></p><h1 id="为什么要搭建博客？"><a href="#为什么要搭建博客？" class="headerlink" title="为什么要搭建博客？"></a>为什么要搭建博客？</h1><p>纯属自己的个人兴趣吧！记录自己最近都干了什么，学到了什么，或许会有一些成就感吧！拥有一个自己的博客写一写自己感兴趣或者正在研究的事或物，不是一件很有意义的事情嘛！</p><h1 id="展望博客"><a href="#展望博客" class="headerlink" title="展望博客"></a>展望博客</h1><p>我会整理一些自己目前在学的东西，一方面能够让自己复习，一方面也能记录一下学习的过程，也希望能够让有兴趣的小伙伴能够看到，也是一个共同进步的过程。</p><h1 id="关于博主"><a href="#关于博主" class="headerlink" title="关于博主"></a>关于博主</h1><p>我真的是一个很懒很懒的人，平时最喜欢干的事情就是睡觉。希望通过写博客来提高提高自己的学习积极性。</p><p>“人间失格”听上去真的很非主流，我自己也这么觉得。但是取名字我觉得更加麻烦，《人间失格》是太宰治的一本书，索性就直接引用过来了。</p><hr><p>最后拿《人间失格》里的一句话作结吧</p><blockquote><p>如今的我，谈不上幸福，也谈不上不幸。</p><p>一切都会过去的。</p><p>在所谓的“人世间”摸爬滚打至今，</p><p>我唯一愿意视为真理的，就只有这一句话，</p><p>一切都会过去的！</p><p>​                                  ————太宰治《人间失格》</p></blockquote><p><strong>感谢你看到了最后！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="简介" scheme="https://heekaai.github.io/categories/%E7%AE%80%E4%BB%8B/"/>
    
    
    <category term="生活" scheme="https://heekaai.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://heekaai.github.io/posts/4a17b156.html"/>
    <id>https://heekaai.github.io/posts/4a17b156.html</id>
    <published>2022-01-02T12:28:30.418Z</published>
    <updated>2022-01-02T15:36:49.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
